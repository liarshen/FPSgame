using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerFootstepListener : MonoBehaviour
{
    public FootstepAudioData FootstepAudioData;
    public AudioSource FootstepAudioSource;

    private CharacterController characterController;
    private Transform footstepTransform;

    private float nextPlayTime;
    
    public enum State
    {
        Idle,
        Walk,
        Sprinting,

    }

    public State characterState;

    private void Start()
    {
        characterController = GetComponent<CharacterController>();
        footstepTransform = transform;
    }

    private void FixedUpdate()
    {
        if(characterController.isGrounded)
        {
            if(characterController.velocity.normalized.magnitude >= 0.1f)
            {
                nextPlayTime += Time.deltaTime;

                if(characterController.velocity.normalized.magnitude>=4)
                {
                    characterState = State.Sprinting;           
                }
                else if(characterController.velocity.normalized.magnitude>0 && characterController.velocity.normalized.magnitude < 4)
                {
                    characterState = State.Walk;
                }

                bool tmp_IsHit = Physics.Linecast(footstepTransform.position, footstepTransform.position + Vector3.down * (characterController.height / 2 + characterController.skinWidth - characterController.center.y), out RaycastHit tmp_HitInfo);

                if (tmp_IsHit)
                {
                    foreach(var tmp_AudioElement in FootstepAudioData.FootstepAudios)
                    {
                        if(tmp_HitInfo.collider.CompareTag(tmp_AudioElement.Tag))
                        {
                            float tmp_Delay = 0;
                            switch (characterState)
                            {
                                case State.Idle:
                                    tmp_Delay = float.MaxValue;
                                    break;
                                case State.Walk:
                                    tmp_Delay = tmp_AudioElement.Delay;
                                    break;
                                case State.Sprinting:
                                    tmp_Delay = tmp_AudioElement.SprintingDelay;
                                    break;


                            }
                            if (nextPlayTime >= tmp_Delay)
                            {
                                int tmp_AudioCount = tmp_AudioElement.AudioClips.Count;
                                int tmp_AudioIndex = UnityEngine.Random.Range(0, tmp_AudioCount);
                                AudioClip tmp_FootstepAudioClip = tmp_AudioElement.AudioClips[tmp_AudioIndex];
                                FootstepAudioSource.clip = tmp_FootstepAudioClip;
                                FootstepAudioSource.Play();
                                nextPlayTime = 0;
                                break;
                            }
                        }
                    }

                }
            }
        }
    }
}
